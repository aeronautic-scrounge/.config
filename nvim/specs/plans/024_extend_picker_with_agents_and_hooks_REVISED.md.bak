# Extend Command Picker with Agents and Hooks - REVISED Implementation Plan

## Metadata
- **Date**: 2025-10-01 (Revised)
- **Original Plan**: 024_extend_picker_with_agents_and_hooks.md
- **Feature**: Extend `<leader>ac` picker to include agents and hooks with complete lifecycle management
- **Scope**: Previewer enhancement, file management, Load All synchronization, TTS config integration
- **Estimated Phases**: 4 (reduced from 6)
- **Complexity**: Medium (reduced from High: 8-12 hours estimated, down from 17-24)
- **Standards File**: /home/benjamin/.config/nvim/CLAUDE.md
- **Research Reports**:
  - nvim/specs/reports/034_extend_command_picker_with_agents_and_hooks.md
  - nvim/specs/reports/036_agent_registry_relevance_analysis.md
  - .claude/specs/reports/019_custom_agent_invocation_workarounds.md

## Revision Summary

### What Changed
1. **Agent Registry Removed**: Based on Report 036, agent registry is not needed for command integration. Commands will use Workaround 1 (natural language explicit invocation) instead.
2. **Phase 1-2 Completed**: Parser extensions and picker integration are already implemented.
3. **TTS Config Added**: Added TTS configurations as fourth artifact type per user requirements.
4. **Simplified Scope**: Focus on completing picker features, not building infrastructure.

### Key Decisions
- ‚úÖ **Use Workaround 1** for agent invocation in commands (natural language)
- ‚úÖ **No agent registry needed** for `.claude/commands/*.md` integration
- ‚úÖ **Complete picker lifecycle** (load, update, save, preview) for all artifact types
- ‚úÖ **Add TTS config support** to picker alongside commands, agents, hooks

## Overview

Extend the existing `<leader>ac` command picker to provide complete visibility and lifecycle management for the entire `.claude/` infrastructure:

1. **Commands** - All slash commands from `.claude/commands/`
2. **Agents** - AI agent definitions from `.claude/agents/`
3. **Hooks** - Shell scripts from `.claude/hooks/`
4. **TTS Configs** - Text-to-speech configurations from `.claude/config/` (NEW)

### Current State (Completed: Phase 1-2)
- ‚úÖ Parser scans commands, agents, and hooks (parser.lua:299-590)
- ‚úÖ Agents appear under commands in picker hierarchy
- ‚úÖ Hooks appear under hook events in picker
- ‚úÖ Tree characters (‚îú‚îÄ, ‚îî‚îÄ) display correctly
- ‚úÖ Basic structure integrated into picker

### Target State (Remaining: Phase 3-4)
- Previewer displays agent, hook, and TTS config information
- File management (load, update, save) works for all artifact types
- Load All synchronizes all four artifact types
- Keyboard shortcuts (Ctrl-l, Ctrl-u, Ctrl-s, Ctrl-e) work for all types
- Local indicator (*) shows correctly
- TTS configs integrated into picker

### What's NOT Needed
- ‚ùå Agent registry infrastructure (Plan 025/026 obsolete for commands)
- ‚ùå Token replacement system for agent prompts
- ‚ùå Migration scripts
- ‚ùå Programmatic agent invocation from commands (use natural language instead)

## Success Criteria
- [x] Parser scans agents and hooks correctly (Phase 1 - COMPLETED)
- [x] Agents appear under commands in picker (Phase 2 - COMPLETED)
- [x] Hooks appear under hook events in picker (Phase 2 - COMPLETED)
- [x] Tree characters display correctly (Phase 2 - COMPLETED)
- [ ] Previewer shows agent, hook, and TTS config details (Phase 3)
- [ ] Ctrl-l loads agents/hooks/configs locally (Phase 3)
- [ ] Ctrl-u updates agents/hooks/configs from global (Phase 3)
- [ ] Ctrl-s saves agents/hooks/configs to global (Phase 3)
- [ ] Ctrl-e edits agents/hooks/configs in buffer (Phase 3)
- [ ] Load All synchronizes all four artifact types (Phase 4)
- [ ] TTS configs appear in picker (Phase 4)
- [ ] All operations preserve executable permissions for hooks (Phase 3-4)
- [ ] Local indicator (*) shows for all artifact types (Phase 3)

## Technical Design

### Artifact Types

The picker now manages four artifact types:

```lua
-- Entry types
entry_type = "command"      -- .claude/commands/*.md
entry_type = "agent"        -- .claude/agents/*.md
entry_type = "hook"         -- .claude/hooks/*.sh
entry_type = "hook_event"   -- Hook event header (e.g., "Stop Event")
entry_type = "tts_config"   -- .claude/config/*.sh (NEW)
```

### TTS Config Structure (NEW)

```lua
-- TTS config structure
tts_config = {
  name = "tts-config.sh",
  description = "Main TTS configuration",
  filepath = "/path/to/.claude/config/tts-config.sh",
  is_local = true|false,
  type = "config|dispatcher|module",  -- Categorization
  variables = {"TTS_VOICE", "TTS_RATE", ...}  -- Extracted from file
}
```

### Architecture

```
Phase 3: Previewer + File Management
‚îú‚îÄ create_command_previewer() ‚Üí handle all entry types
‚îú‚îÄ load_agent_locally() ‚Üí copy agent to local
‚îú‚îÄ load_hook_locally() ‚Üí copy hook with exec perms
‚îú‚îÄ load_tts_config_locally() ‚Üí copy config
‚îú‚îÄ update_*_from_global() ‚Üí replace local with global
‚îú‚îÄ save_*_to_global() ‚Üí copy local to global
‚îî‚îÄ attach_mappings() ‚Üí wire keyboard shortcuts

Phase 4: Load All + TTS Integration
‚îú‚îÄ scan_tts_configs_directory() ‚Üí parse .claude/config/*.sh
‚îú‚îÄ create_picker_entries() ‚Üí add TTS config entries
‚îú‚îÄ load_all_globally() ‚Üí sync all four types
‚îî‚îÄ Format TTS configs in picker display
```

## Implementation Phases

### Phase 1: Parser Extensions [‚úÖ COMPLETED]
**Status**: Implemented in parser.lua:299-590

Functions implemented:
- `scan_agents_directory()` - Parses `.claude/agents/*.md`
- `scan_hooks_directory()` - Parses `.claude/hooks/*.sh`
- `build_agent_dependencies()` - Maps commands ‚Üí agents
- `build_hook_dependencies()` - Maps events ‚Üí hooks
- `get_extended_structure()` - Returns unified structure

**No changes needed** - Phase 1 is complete and working.

### Phase 2: Picker Integration [‚úÖ COMPLETED]
**Status**: Implemented in picker.lua

Integration points:
- `show_commands_picker()` calls `get_extended_structure()`
- `create_picker_entries()` builds unified entry list
- Agents appear under parent commands
- Hooks appear under event headers
- Tree characters display correctly

**No changes needed** - Phase 2 is complete and working.

### Phase 3: Previewer and File Management [üîÑ IN PROGRESS]
**Objective**: Complete previewer and implement lifecycle operations for all artifact types
**Complexity**: Medium (4-6 hours)

#### Part A: Previewer Enhancement (2-3 hours)

Tasks:
- [ ] Update `create_command_previewer()` in picker.lua:106
  - Add agent preview case (`entry_type == "agent"`)
    ```lua
    -- Display: name, description, allowed_tools, parent_commands, filepath
    -- Format: Markdown with sections
    ```
  - Add hook preview case (`entry_type == "hook"`)
    ```lua
    -- Display: name, description, events, script path, permissions
    -- Format: Markdown with sections
    ```
  - Add hook event preview case (`entry_type == "hook_event"`)
    ```lua
    -- Display: event name, description, trigger timing, registered hooks
    -- Format: Markdown with sections
    ```
  - Add TTS config preview case (`entry_type == "tts_config"`)
    ```lua
    -- Display: config name, description, type, variables, filepath
    -- Format: Markdown with sections
    ```

- [ ] Add helper functions for hook events
  ```lua
  local function get_hook_event_description(event_name)
    -- Lookup table for event descriptions
    local descriptions = {
      Stop = "Triggered after command completion",
      SessionStart = "Triggered when Claude Code session starts",
      -- ... etc
    }
    return descriptions[event_name] or "Unknown event"
  end
  ```

- [ ] Update help text in previewer
  - Document new entry types (agents, hooks, TTS configs)
  - Explain keyboard shortcuts for all types
  - Update [Load All Commands] description

Testing:
```lua
-- Launch picker and test previews
<leader>ac
-- Navigate to agent ‚Üí verify preview shows full metadata
-- Navigate to hook ‚Üí verify preview shows events and permissions
-- Navigate to hook event ‚Üí verify preview shows description
-- Press ? ‚Üí verify help text includes all types
```

Expected outcomes:
- All entry types have informative previews
- Help text is comprehensive and accurate
- Preview formatting is consistent

#### Part B: File Management Functions (2-3 hours)

Tasks:
- [ ] Implement `load_agent_locally(agent, silent)`
  ```lua
  function M.load_agent_locally(agent, silent)
    -- Copy from ~/.config/.claude/agents/ to .claude/agents/
    -- Check if already local, skip if so
    -- Show notification unless silent
    -- Return success boolean
  end
  ```

- [ ] Implement `load_hook_locally(hook, silent)`
  ```lua
  function M.load_hook_locally(hook, silent)
    -- Copy from ~/.config/.claude/hooks/ to .claude/hooks/
    -- IMPORTANT: Preserve executable permissions
    local perms = vim.fn.getfperm(source_path)
    -- Copy file
    vim.fn.setfperm(dest_path, perms)
    -- Return success boolean
  end
  ```

- [ ] Implement `load_tts_config_locally(config, silent)`
  ```lua
  function M.load_tts_config_locally(config, silent)
    -- Copy from ~/.config/.claude/config/ to .claude/config/
    -- Similar to load_agent_locally
    -- Return success boolean
  end
  ```

- [ ] Implement `update_*_from_global()` functions
  ```lua
  -- For agents, hooks, and TTS configs
  -- Overwrite local with global version
  -- Preserve permissions for hooks
  -- Show notifications
  ```

- [ ] Implement `save_*_to_global()` functions
  ```lua
  -- For agents, hooks, and TTS configs
  -- Copy local to ~/.config/.claude/
  -- Preserve permissions for hooks
  -- Check if local first
  ```

- [ ] Update action mappings in `attach_mappings()`
  ```lua
  -- <CR> (Enter): Open file in buffer
  if entry.entry_type == "agent" then
    vim.cmd("edit " .. entry.filepath)
  elseif entry.entry_type == "hook" then
    vim.cmd("edit " .. entry.filepath)
  elseif entry.entry_type == "tts_config" then
    vim.cmd("edit " .. entry.filepath)
  -- ... existing command logic
  end

  -- <C-l>: Load locally
  if entry.entry_type == "agent" then
    load_agent_locally(entry, false)
  elseif entry.entry_type == "hook" then
    load_hook_locally(entry, false)
  elseif entry.entry_type == "tts_config" then
    load_tts_config_locally(entry, false)
  -- ... existing command logic
  end

  -- <C-u>: Update from global
  -- <C-s>: Save to global
  -- Similar patterns for all types
  ```

Testing:
```bash
<leader>ac

# Test agent operations
# Navigate to global agent
# Press Ctrl-l ‚Üí should copy to local
# Verify local indicator (*) appears
# Press Ctrl-u ‚Üí should overwrite with global
# Edit locally ‚Üí Press Ctrl-s ‚Üí should save to global

# Test hook operations
# Navigate to global hook
# Press Ctrl-l ‚Üí should copy with executable permissions
# Verify: ls -la .claude/hooks/  # Check permissions
# Press Ctrl-s ‚Üí should preserve permissions when saving

# Test TTS config operations
# Navigate to TTS config
# Press Ctrl-l/u/s ‚Üí should work like agents
```

Expected outcomes:
- All file operations work for all artifact types
- Executable permissions preserved for hooks
- Notifications show success/failure
- Picker refreshes after operations
- Error handling is robust

### Phase 4: Load All Enhancement and TTS Integration [üìã PLANNED]
**Objective**: Extend Load All to sync all four types and integrate TTS configs into picker
**Complexity**: Medium (4-6 hours)

#### Part A: TTS Config Scanner (1-2 hours)

Tasks:
- [ ] Implement `scan_tts_configs_directory(config_dir)` in parser.lua
  ```lua
  function M.scan_tts_configs_directory(config_dir)
    -- Scan .claude/config/*.sh files
    -- Parse header comments for description
    -- Extract variable names (e.g., TTS_VOICE=...)
    -- Categorize: config, dispatcher, or module
    -- Return array of tts_config structures
  end
  ```

- [ ] Add TTS config categorization
  ```lua
  local function categorize_tts_config(filename)
    if filename:match("config") then return "config" end
    if filename:match("dispatcher") then return "dispatcher" end
    return "module"
  end
  ```

- [ ] Update `get_extended_structure()` to include TTS configs
  ```lua
  local local_tts = M.scan_tts_configs_directory(project_config_dir)
  local global_tts = M.scan_tts_configs_directory(global_config_dir)

  return {
    commands = ...,
    agents = ...,
    hooks = ...,
    tts_configs = merged_tts,  -- NEW
    ...
  }
  ```

Testing:
```lua
:lua local parser = require('neotex.plugins.ai.claude.commands.parser')
:lua local structure = parser.get_extended_structure()
:lua vim.print(structure.tts_configs)
-- Should show: tts-config.sh, tts-dispatcher.sh, etc.
```

Expected outcomes:
- TTS configs parsed from `.claude/config/`
- Metadata extracted (description, variables, type)
- Global and local configs merged correctly

#### Part B: Picker TTS Integration (1-2 hours)

Tasks:
- [ ] Update `create_picker_entries()` to add TTS config entries
  ```lua
  -- Add TTS configs section after hook events
  entries[#entries + 1] = {
    display = "‚îÄ‚îÄ‚îÄ TTS Configurations ‚îÄ‚îÄ‚îÄ",
    entry_type = "separator",
    ordinal = "zzz_tts_separator"
  }

  for _, config in ipairs(tts_configs) do
    entries[#entries + 1] = {
      display = format_tts_config(config),
      entry_type = "tts_config",
      name = config.name,
      filepath = config.filepath,
      is_local = config.is_local,
      -- ... other metadata
    }
  end
  ```

- [ ] Implement `format_tts_config(config)`
  ```lua
  local function format_tts_config(config)
    local indicator = config.is_local and " *" or ""
    local type_label = "[" .. config.type .. "]"
    return string.format("%s %s%s", type_label, config.name, indicator)
  end
  ```

Testing:
```bash
<leader>ac
# Verify TTS configs appear at bottom of picker
# Verify [config], [dispatcher], [module] labels
# Verify * indicator for local configs
# Verify Ctrl-l/u/s work for TTS configs
```

Expected outcomes:
- TTS configs appear in picker display
- Type labels help identify config purpose
- Local indicator shows correctly
- All keyboard shortcuts work

#### Part C: Enhanced Load All (2 hours)

Tasks:
- [ ] Rename `load_all_commands_locally()` to `load_all_globally()`
  - Update all references in picker.lua
  - More accurate name for the operation

- [ ] Add `scan_directory_for_sync(dir, extension)` helper
  ```lua
  local function scan_directory_for_sync(global_dir, local_dir, extension)
    -- Scan global directory for files with extension
    -- Check which are new vs existing in local
    -- Return {
    --   new_files = {file1, file2, ...},
    --   update_files = {file3, file4, ...},
    --   new_count = N,
    --   update_count = M
    -- }
  end
  ```

- [ ] Add `sync_files(file_list, global_dir, local_dir, preserve_perms)` helper
  ```lua
  local function sync_files(files, global_dir, local_dir, preserve_perms)
    local results = {new = 0, updated = 0, failed = 0}

    for _, file in ipairs(files) do
      local src = global_dir .. "/" .. file
      local dest = local_dir .. "/" .. file

      -- Copy file
      -- Preserve permissions if preserve_perms == true
      -- Track results
    end

    return results
  end
  ```

- [ ] Update `load_all_globally()` to sync all four types
  ```lua
  function M.load_all_globally()
    -- Scan for commands, agents, hooks, TTS configs
    local cmd_sync = scan_directory_for_sync(..., ".md")
    local agent_sync = scan_directory_for_sync(..., ".md")
    local hook_sync = scan_directory_for_sync(..., ".sh")
    local tts_sync = scan_directory_for_sync(..., ".sh")

    -- Calculate total counts
    local total_new = cmd_sync.new_count + agent_sync.new_count +
                      hook_sync.new_count + tts_sync.new_count
    local total_update = cmd_sync.update_count + agent_sync.update_count +
                         hook_sync.update_count + tts_sync.update_count

    -- Show confirmation dialog with breakdown
    local msg = string.format(
      "Load All from ~/.config/.claude/?\n\n" ..
      "Commands: %d new, %d update\n" ..
      "Agents: %d new, %d update\n" ..
      "Hooks: %d new, %d update\n" ..
      "TTS Configs: %d new, %d update\n\n" ..
      "Total: %d new, %d updates",
      cmd_sync.new_count, cmd_sync.update_count,
      agent_sync.new_count, agent_sync.update_count,
      hook_sync.new_count, hook_sync.update_count,
      tts_sync.new_count, tts_sync.update_count,
      total_new, total_update
    )

    if vim.fn.confirm(msg, "&Yes\n&No", 2) == 1 then
      -- Create directories if needed
      -- Sync each type
      sync_files(cmd_sync.all_files, ..., ..., false)
      sync_files(agent_sync.all_files, ..., ..., false)
      sync_files(hook_sync.all_files, ..., ..., true)  -- preserve perms
      sync_files(tts_sync.all_files, ..., ..., true)   -- preserve perms

      -- Show results notification
      -- Refresh picker
    end
  end
  ```

- [ ] Update [Load All Commands] preview
  ```lua
  -- Show counts for all four types
  -- Display breakdown of new vs update
  -- Explain what will be synchronized
  ```

Testing:
```bash
<leader>ac
# Navigate to [Load All Commands]
# Verify preview shows counts for all 4 types
# Press Enter ‚Üí verify confirmation dialog shows breakdown
# Confirm ‚Üí verify all types synchronized
# Verify hooks and TTS configs have correct permissions
# Verify notification shows results
# Verify picker refreshes with new items
```

Expected outcomes:
- Load All synchronizes commands, agents, hooks, and TTS configs
- Confirmation dialog shows clear breakdown by type
- Executable permissions preserved for hooks and TTS configs
- Success notification shows detailed results
- Picker refreshes automatically

## Testing Strategy

### Integration Testing
- [ ] Full picker workflow test
  - Load picker with `<leader>ac`
  - Navigate through all entry types
  - Verify previews for each type
  - Test all keyboard shortcuts
  - Verify local indicators

- [ ] File lifecycle test
  - Test load, update, save for each artifact type
  - Verify permissions preserved for hooks and TTS configs
  - Test with missing directories
  - Test with permission errors

- [ ] Load All workflow test
  - Test with empty local directories
  - Test with partial existing local items
  - Test with all local items present
  - Verify confirmation dialog accuracy
  - Verify synchronization results

### Regression Testing
- [ ] Verify existing command functionality preserved
- [ ] Test with projects without agents/hooks/configs
- [ ] Verify backward compatibility
- [ ] Test picker performance with many entries

### Edge Cases
1. **Empty directories**: No `.claude/agents/`, `.claude/hooks/`, `.claude/config/`
2. **Global only**: Items only in `~/.config/.claude/`
3. **Local only**: Items only in project `.claude/`
4. **Mixed**: Some global, some local, some both
5. **Permission issues**: Read-only files, permission denied
6. **Large scale**: Many entries of each type
7. **Malformed files**: Invalid YAML, corrupted scripts

## Documentation Requirements

### Code Documentation
- [ ] Add docstrings to all new functions
- [ ] Document TTS config data structure
- [ ] Explain permission preservation logic
- [ ] Document Load All synchronization behavior

### User Documentation
- [ ] Update picker.lua module comments
- [ ] Update help text in previewer
- [ ] Document all keyboard shortcuts
- [ ] Explain entry types and indicators

### README Updates
- [ ] Update `nvim/lua/neotex/plugins/ai/claude/commands/README.md`
  - Document four artifact types
  - Show example picker display
  - List all keyboard shortcuts
  - Explain Load All behavior
  - Document TTS config integration

## Dependencies

### External Dependencies
- Existing parser.lua and picker.lua modules
- Telescope.nvim
- plenary.nvim

### File Dependencies
- `.claude/commands/*.md` - Slash commands
- `.claude/agents/*.md` - Agent definitions
- `.claude/hooks/*.sh` - Hook scripts
- `.claude/config/*.sh` - TTS configurations (NEW)
- `.claude/settings.local.json` - Hook registrations

### Standards Compliance
- Follow Lua code standards from nvim/CLAUDE.md
- 2 spaces indentation, expandtab
- snake_case for variables/functions
- pcall for error handling
- Comprehensive error messages

## Risk Assessment

### Medium Risk
- **Permission handling**: Must preserve executable permissions for hooks and TTS configs
  - Mitigation: Use vim.fn.getfperm/setfperm consistently
  - Mitigation: Test on multiple platforms

- **TTS config parsing**: Shell scripts may have varied formats
  - Mitigation: Robust parsing with fallbacks
  - Mitigation: Handle missing metadata gracefully

### Low Risk
- **Performance**: More entry types could slow picker
  - Mitigation: Profile with realistic data
  - Mitigation: Optimize if needed (already performant with current entries)

- **Backward compatibility**: Projects without all artifact types
  - Mitigation: Graceful handling of missing directories
  - Mitigation: Empty arrays for missing types

## Notes

### Design Decisions

**Why No Agent Registry**:
- Based on Report 036, agent registry is only valuable for Neovim/Lua programmatic workflows
- Commands use Workaround 1 (natural language invocation): "Use the [agent] to [task]"
- No need for programmatic invocation infrastructure in commands
- Picker needs to *display* agents, not *invoke* them programmatically

**TTS Config Integration**:
- User requirement: manage TTS configs via picker
- Treat similarly to hooks (shell scripts, preserve permissions)
- Categorize by purpose (config, dispatcher, module)
- Enable quick editing and synchronization

**Entry Ordering**:
1. Commands (primary)
2. Agents (under parent commands)
3. Hook Events (separate section)
4. TTS Configurations (separate section)

**Load All Behavior**:
- Synchronizes all four artifact types
- Shows detailed breakdown in confirmation
- Preserves permissions for scripts
- Single atomic operation

### Implementation Timeline

**Revised Estimate**: 8-12 hours (down from 17-24)

Breakdown:
- Phase 3A: Previewer (2-3 hours)
- Phase 3B: File Management (2-3 hours)
- Phase 4A: TTS Scanner (1-2 hours)
- Phase 4B: Picker TTS Integration (1-2 hours)
- Phase 4C: Enhanced Load All (2 hours)
- Documentation: 1-2 hours

**Time Savings**:
- Phase 1-2 already completed (saved 5-7 hours)
- No agent registry needed (saved 4-6 hours)
- No migration scripts needed (saved 2-3 hours)

### Future Enhancements
- Create new agent/hook/config from picker (similar to Ctrl-n for commands)
- Hook enablement toggle
- TTS config variable editor
- Dependency visualization
- Search/filter by type
- Agent/hook templates

## Migration from Original Plan

### Changes from Plan 024

**Removed**:
- Agent registry infrastructure (Plan 025/026 obsolete)
- Token replacement for agent prompts
- Programmatic agent invocation

**Added**:
- TTS configuration support
- Simplified based on completed Phase 1-2
- Workaround 1 guidance for agent invocation

**Preserved**:
- All core picker functionality
- File lifecycle management
- Load All synchronization
- Keyboard shortcuts
- Tree character hierarchy

### Compatibility Notes

- This revised plan completes the original Plan 024 objectives
- Removes unnecessary complexity (agent registry)
- Adds requested feature (TTS configs)
- Maintains all existing functionality
- Reduces implementation time by ~50%

---

*Plan revised: 2025-10-01*
*Based on: Reports 019, 036, and implementation progress*
*Status: Phase 1-2 complete, Phase 3-4 remaining*
