# .claude/ Directory Modularization Implementation Plan

## Metadata
- **Date**: 2025-10-13
- **Feature**: Refactor .claude/ directory for improved modularity
- **Scope**: Extract shared documentation, consolidate utilities, apply reference-based composition
- **Estimated Phases**: 5
- **Standards File**: /home/benjamin/.config/CLAUDE.md
- **Research Reports**: Research conducted via /orchestrate workflow (inline synthesis)

## Overview

The .claude/ directory has grown to contain several large, unwieldy files that violate industry best practices for modularity. The largest command file (orchestrate.md) is 6,341 lines with a 4:1 documentation-to-code ratio, making navigation difficult. This refactor will apply the proven reference-based composition pattern from agents/shared/ to commands, extract reusable documentation sections, consolidate overlapping utility functions, and align with 2025 best practices (250-line file threshold, Single Responsibility Principle, template composition).

### Key Findings from Research

**Current State**:
- orchestrate.md: 6,341 lines (197KB, 200 sections)
- implement.md: 1,803 lines (69KB, 70 sections)
- Large utilities: auto-analysis-utils.sh (1,755 lines), parse-adaptive-plan.sh (1,298 lines)
- Structural issues: Documentation bloat, repeated patterns across 9+ commands, overlapping utility responsibilities

**Proven Patterns**:
- agents/shared/ approach reduced files by 28% through reference-based composition
- Bash utility delegation successfully separates logic from prompts
- Template system demonstrates effective composition without duplication

**Industry Standards (2025)**:
- 250-line file threshold (Code Climate)
- Single Responsibility Principle for commands
- Template-based composition using native markdown references
- Extract business logic to testable modules

## Success Criteria
- [ ] orchestrate.md reduced from 6,341 to <1,500 lines
- [ ] implement.md reduced from 1,803 to <800 lines
- [ ] commands/shared/ directory created with reusable sections
- [ ] Overlapping utility functions consolidated
- [ ] All existing commands continue to function correctly
- [ ] Test suite passes with ≥80% coverage
- [ ] Documentation follows clean-break refactor philosophy (no historical markers)

## Technical Design

### Architecture Decisions

**1. Reference-Based Composition Pattern**
- Create `.claude/commands/shared/` directory parallel to `.claude/agents/shared/`
- Extract reusable documentation sections to shared markdown files
- Commands reference sections using relative links: `See [Section](shared/file.md)`
- No preprocessing required—Claude already reads linked files

**2. Utility Consolidation Strategy**
- Merge overlapping functions in artifact-utils.sh and auto-analysis-utils.sh
- Extract common checkpoint initialization pattern to shared template
- Create utility-specific READMEs documenting function responsibilities
- Maintain backward compatibility during transition

**3. Documentation Extraction Priorities**

**High Priority** (orchestrate.md):
- Workflow phase descriptions (~800 lines) → `shared/workflow-phases.md`
- Error recovery patterns (~400 lines) → `shared/error-recovery.md`
- Context management guide (~300 lines) → `shared/context-management.md`
- Agent coordination patterns (~500 lines) → `shared/agent-coordination.md`
- Examples and use cases (~400 lines) → `shared/orchestrate-examples.md`

**Medium Priority** (implement.md):
- Adaptive planning guide (~200 lines) → `shared/adaptive-planning.md`
- Progressive structure documentation (~150 lines) → `shared/progressive-structure.md`
- Phase execution protocol (~180 lines) → `shared/phase-execution.md`

**Low Priority** (other commands):
- Common error handling patterns → `shared/error-handling.md`
- Testing protocols → `shared/testing-patterns.md`

**4. File Size Targets**

After refactoring:
- orchestrate.md: ~1,200 lines (core logic + references)
- implement.md: ~700 lines (core logic + references)
- commands/shared/*.md: 200-400 lines each (focused sections)
- Utilities: <1,000 lines per file (split if exceeding)

### Component Interactions

```
.claude/
├── commands/
│   ├── orchestrate.md (refactored to ~1,200 lines)
│   ├── implement.md (refactored to ~700 lines)
│   └── shared/
│       ├── README.md
│       ├── workflow-phases.md (referenced by orchestrate.md)
│       ├── error-recovery.md (referenced by orchestrate.md, implement.md)
│       ├── context-management.md (referenced by orchestrate.md)
│       ├── agent-coordination.md (referenced by orchestrate.md)
│       ├── adaptive-planning.md (referenced by implement.md)
│       └── phase-execution.md (referenced by implement.md)
├── lib/
│   ├── artifact-utils.sh (consolidated from 2 sources)
│   ├── checkpoint-utils.sh (templates added)
│   └── README.md (updated with function inventory)
└── tests/
    └── test_command_references.sh (validates all links)
```

### Data Flow

**Before**: Command files contain all documentation inline → Large, unwieldy files

**After**:
1. Command files contain core logic and structural overview
2. Detailed documentation extracted to `commands/shared/`
3. Commands reference shared sections via markdown links
4. Claude reads referenced files automatically when needed
5. Each shared section remains focused and maintainable

## Implementation Phases

### Phase 1: Foundation and Analysis
**Objective**: Set up shared directory structure and inventory extraction candidates
**Complexity**: Low

Tasks:
- [ ] Create `.claude/commands/shared/` directory
- [ ] Create `.claude/commands/shared/README.md` with purpose and navigation
- [ ] Analyze orchestrate.md sections and tag extraction candidates (mark line ranges)
- [ ] Analyze implement.md sections and tag extraction candidates
- [ ] Create extraction plan spreadsheet: section name, source file, line range, target file, priority
- [ ] Run baseline tests to establish pre-refactor validation: `.claude/tests/run_all_tests.sh`

Testing:
```bash
# Verify directory structure
test -d .claude/commands/shared && echo "Directory created"

# Verify README exists
test -f .claude/commands/shared/README.md && echo "README created"

# Run baseline tests
cd .claude/tests && ./run_all_tests.sh
```

Expected outcomes:
- commands/shared/ directory exists with README
- Extraction candidates documented with line ranges
- Baseline test results recorded (should be 100% passing)

### Phase 2: Extract orchestrate.md Documentation
**Objective**: Extract largest documentation sections from orchestrate.md to shared files
**Complexity**: High

Tasks:
- [ ] Extract workflow phase descriptions to `shared/workflow-phases.md` (~800 lines)
- [ ] Extract error recovery patterns to `shared/error-recovery.md` (~400 lines)
- [ ] Extract context management guide to `shared/context-management.md` (~300 lines)
- [ ] Extract agent coordination patterns to `shared/agent-coordination.md` (~500 lines)
- [ ] Extract examples to `shared/orchestrate-examples.md` (~400 lines)
- [ ] Update orchestrate.md to reference extracted sections using relative links
- [ ] Add section summaries (50-100 words) in orchestrate.md before each reference link
- [ ] Verify orchestrate.md reduced to ~1,200 lines
- [ ] Test orchestrate command with sample workflow: `/orchestrate Add simple hello world function`

Testing:
```bash
# Verify file sizes
wc -l .claude/commands/orchestrate.md  # Should be ~1,200 lines
wc -l .claude/commands/shared/*.md     # Each should be 200-800 lines

# Verify all references are valid
grep -o 'See \[.*\](shared/.*\.md)' .claude/commands/orchestrate.md | while read ref; do
  file=$(echo "$ref" | grep -o 'shared/.*\.md')
  test -f ".claude/commands/$file" && echo "✓ $file" || echo "✗ Missing: $file"
done

# Integration test
.claude/tests/test_command_integration.sh orchestrate
```

Expected outcomes:
- 5 new shared documentation files created
- orchestrate.md reduced from 6,341 to ~1,200 lines
- All references resolve correctly
- orchestrate command functions correctly

### Phase 3: Extract implement.md Documentation
**Objective**: Extract documentation sections from implement.md to shared files
**Complexity**: Medium

Tasks:
- [ ] Extract adaptive planning guide to `shared/adaptive-planning.md` (~200 lines)
- [ ] Extract progressive structure docs to `shared/progressive-structure.md` (~150 lines)
- [ ] Extract phase execution protocol to `shared/phase-execution.md` (~180 lines)
- [ ] Update implement.md to reference extracted sections
- [ ] Add section summaries in implement.md before each reference link
- [ ] Verify implement.md reduced to ~700 lines
- [ ] Create cross-reference inventory: which commands reference which shared sections
- [ ] Test implement command with sample plan: `.claude/tests/test_command_integration.sh implement`

Testing:
```bash
# Verify file size reduction
wc -l .claude/commands/implement.md  # Should be ~700 lines

# Verify references
grep -o 'See \[.*\](shared/.*\.md)' .claude/commands/implement.md | while read ref; do
  file=$(echo "$ref" | grep -o 'shared/.*\.md')
  test -f ".claude/commands/$file" && echo "✓ $file" || echo "✗ Missing: $file"
done

# Test progressive structure utilities still work
source .claude/lib/parse-adaptive-plan.sh
detect_plan_structure .claude/specs/plans/001_*.md

# Integration test
.claude/tests/test_command_integration.sh implement
```

Expected outcomes:
- 3 new shared documentation files created
- implement.md reduced from 1,803 to ~700 lines
- Cross-reference inventory completed
- implement command functions correctly

### Phase 4: Consolidate Utility Libraries
**Objective**: Merge overlapping utility functions and extract common patterns
**Complexity**: Medium

Tasks:
- [ ] Inventory functions in artifact-utils.sh and auto-analysis-utils.sh
- [ ] Identify duplicate/overlapping artifact management functions
- [ ] Create consolidated artifact-management.sh with merged functions
- [ ] Update commands sourcing old utilities to source new consolidated version
- [ ] Extract common checkpoint initialization pattern to `lib/checkpoint-template.sh`
- [ ] Update 9+ commands to use checkpoint template (detect-project-dir.sh pattern)
- [ ] Create/update `lib/README.md` with function inventory and usage guide
- [ ] Deprecate old utility files (add deprecation notice, keep for 1 version)
- [ ] Run utility-specific tests: `.claude/tests/test_shared_utilities.sh`

Testing:
```bash
# Verify consolidated utility exists
test -f .claude/lib/artifact-management.sh && echo "✓ Consolidated utility created"

# Verify checkpoint template
test -f .claude/lib/checkpoint-template.sh && echo "✓ Checkpoint template created"

# Test function availability
source .claude/lib/artifact-management.sh
declare -F | grep artifact  # Should list all artifact functions

# Run utility tests
cd .claude/tests && ./test_shared_utilities.sh

# Verify commands source correctly
for cmd in .claude/commands/*.md; do
  grep -q "source.*artifact-management.sh" "$cmd" && echo "✓ $(basename $cmd)"
done
```

Expected outcomes:
- artifact-management.sh consolidates functions from 2 sources
- checkpoint-template.sh extracted and used by 9+ commands
- lib/README.md documents all utilities and functions
- All utility tests passing

### Phase 5: Documentation, Testing, and Validation
**Objective**: Complete documentation updates, run full test suite, validate refactor
**Complexity**: Medium

Tasks:
- [ ] Update `.claude/commands/README.md` to describe shared/ directory pattern
- [ ] Update `.claude/README.md` to reflect new modular architecture
- [ ] Add architecture diagram to `.claude/README.md` showing command→shared references
- [ ] Create test for validating all markdown references: `test_command_references.sh`
- [ ] Run complete test suite: `.claude/tests/run_all_tests.sh`
- [ ] Verify coverage ≥80%: use shellcheck and test output analysis
- [ ] Document refactor in project changelog (following clean-break philosophy: no historical markers)
- [ ] Create migration guide for developers (separate from main docs): `docs/REFACTOR_2025_10.md`
- [ ] Validate success criteria checklist from plan overview
- [ ] Run integration tests with real workflows (orchestrate, implement, report, plan)

Testing:
```bash
# Test all command references are valid
.claude/tests/test_command_references.sh

# Run complete test suite
cd .claude/tests && ./run_all_tests.sh | tee test_results.log

# Check coverage (count tests passed)
passed=$(grep -c "PASS" test_results.log)
total=$(grep -c "TEST" test_results.log)
coverage=$((passed * 100 / total))
echo "Coverage: $coverage%"
test $coverage -ge 80 && echo "✓ Coverage threshold met"

# Integration tests
/orchestrate Simple test workflow
/implement .claude/specs/plans/001_test_plan.md
/report Test topic
/plan Test feature

# Validate success criteria
wc -l .claude/commands/orchestrate.md  # <1,500 lines
wc -l .claude/commands/implement.md    # <800 lines
test -d .claude/commands/shared && echo "✓ shared/ created"
```

Expected outcomes:
- All documentation updated with new architecture
- Architecture diagram shows command→shared references
- test_command_references.sh validates all links
- Complete test suite passes with ≥80% coverage
- Integration tests confirm real workflows function correctly
- Success criteria validated

## Testing Strategy

### Unit Tests
- **Utility Functions**: Test each consolidated utility function independently
- **Reference Validation**: Test that all markdown links resolve to existing files
- **Template Rendering**: Test checkpoint template generates correct code
- **File Size Validation**: Test that refactored files meet size targets

### Integration Tests
- **Command Execution**: Test orchestrate, implement, report, plan with real inputs
- **Cross-References**: Test that commands correctly read referenced shared sections
- **Workflow Completion**: Test complete workflows (research→plan→implement→document)
- **Error Handling**: Test error recovery patterns in shared/error-recovery.md

### Regression Tests
- **Existing Functionality**: All pre-refactor commands must continue to work
- **Backward Compatibility**: Old utility sourcing must still work during deprecation period
- **Test Suite**: All existing tests must pass after refactor

### Coverage Requirements
- ≥80% of refactored code covered by tests
- All new shared documentation sections referenced by at least one test
- All consolidated utility functions have unit tests

## Documentation Requirements

### Updated Documentation
- `.claude/README.md`: Architecture overview with command→shared references
- `.claude/commands/README.md`: Explain shared/ pattern and usage
- `.claude/commands/shared/README.md`: Purpose, navigation, cross-reference index
- `.claude/lib/README.md`: Utility inventory, function signatures, usage examples
- `CLAUDE.md`: Update project standards to reference new modular architecture

### New Documentation (Separate from Main Docs)
- `docs/REFACTOR_2025_10.md`: Technical migration guide for developers
- `docs/MODULARITY_PATTERNS.md`: Explain reference-based composition pattern

### Architecture Diagram
Add to `.claude/README.md`:
```
Commands → Shared Documentation → Utilities

orchestrate.md ─┐
implement.md ───┼─→ workflow-phases.md ─┐
report.md ──────┤                        ├─→ checkpoint-utils.sh
plan.md ────────┼─→ error-recovery.md ───┤
                └─→ adaptive-planning.md ─┴─→ artifact-management.sh
```

## Dependencies

### Prerequisites
- No external dependencies required
- Uses existing bash utilities and markdown files
- Requires Claude's ability to read linked files (already proven)

### Internal Dependencies
- `.claude/tests/` directory with test suite
- `.claude/lib/` utilities already in use
- `.claude/agents/shared/` pattern as reference implementation

## Risk Assessment

### High Risk
- **Breaking existing commands**: Mitigation—extensive testing, maintain deprecated utilities
- **Reference resolution failures**: Mitigation—test_command_references.sh validates all links
- **Test coverage drops**: Mitigation—run baseline tests first, maintain ≥80% target

### Medium Risk
- **Over-extraction**: Mitigation—preserve 50-100 word summaries in commands before references
- **Utility consolidation errors**: Mitigation—keep deprecated utilities for 1 version
- **Documentation drift**: Mitigation—cross-reference inventory, automated link validation

### Low Risk
- **File size targets missed**: Mitigation—iterative extraction if needed
- **Performance impact**: Mitigation—reading linked files is already proven pattern

## Notes

### Refactoring Philosophy
Following CLAUDE.md Development Philosophy:
- **Clean-Break Refactors**: Prioritize coherence over compatibility
- **No Historical Markers**: Documentation describes current state only
- **Present-Focused**: Migration guide separate from main documentation
- **Quality First**: Well-designed system over backward-compatible compromises

### Success Metrics
- orchestrate.md: 6,341 → ~1,200 lines (81% reduction)
- implement.md: 1,803 → ~700 lines (61% reduction)
- commands/shared/: 8-10 reusable sections (28% reduction like agents/shared/)
- lib/: Consolidated utilities, <1,000 lines per file
- Tests: ≥80% coverage maintained

### Future Improvements
- Consider extracting setup.md (911 lines) in future iteration
- Explore preprocessing tools (gomplate, Template Toolkit) if reference pattern insufficient
- Apply pattern to other large files (convert-docs.sh: 1,502 lines)

### Related Research
This plan incorporates findings from:
- Existing patterns analysis (agents/shared/ success)
- Industry best practices (2025 standards: 250-line threshold, SRP, template composition)
- Technical strategies (reference-based composition, bash delegation, template systems)
